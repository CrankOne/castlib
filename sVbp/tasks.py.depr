# -*- coding: utf-8 -*-
# Copyright (c) 2017 Renat R. Dusaev <crank@qcrypt.org>
# Author: Renat R. Dusaev <crank@qcrypt.org>
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

from __future__ import print_function

"""
This file declares a generalized task representing dynamically-composed cstl3
operation. The concept of cstl3's "stages" is utilized here. Basically, this
worker just delegates exuction of task to the daemon's task-composing function
in castlib3.
"""

from sVresources import get_app
from sVresources.taskHandlers import RedisPublishingLogHandler
from castlib3.daemon import eval_task
from castlib3.logs import gLogger
from importlib import import_module
from castlib2.db import gSession, initialize_database
import redis, celery
import logging, yaml

clry = get_app().get_celery()
gExtraModules = {}

class Castlib2Task(celery.Task):
    def __init__(self):
        # Remove all old handlers
        for hdlr in gLogger.handlers[:]:
            gLogger.removeHandler(hdlr)
        self.redis = redis.Redis()
        self.logHandler = RedisPublishingLogHandler( self.redis )
        gLogger.addHandler( self.logHandler )
        gLogger.info( "New task worker arised." )

class Castlib2StagesTask(Castlib2Task):
    def __init__(self, redisObj ):
        super(self.__class__, self).__init__( redisObj )
        #if not gSession:
        #    initialize_database(  )

    def after_return(self, status, retval, task_id, args, kwargs, einfo):
        if gSession:
            gSession.remove()
            castlib2.db.gSession = None

@clry.task(bind=True, base=Castlib2StagesTask)
def cstl2_operation( self, task, dbCfgStr=u'{}' ):
    if 'testing' == task:
        gLogger.info( "Testing message acquired." )
        return
    if gSession:
        raise RuntimeError( "Database session is active at the beginning of " \
                            "the task. Unable to perform proper database " \
                            "initialization." )
    else:
        #databaseArgs=[]
        #databaseKwArgs={}
        dbCfg = yaml.safe_load(dbCfgStr)
        print( repr(dbCfg) )
        initialize_database( dbCfg['databaseArgs'],
                             engineCreateKWargs=dbCfg['databaseKwArgs'],
                             initMappers=False )
    if task.has_key( 'extraImport' ):
        for modName in task['extraImport']:
            if modName not in gExtraModules.keys():
                gExtraModules[modName] = import_module(modName)
                gLogger.info( 'Loaded new module "%s" supplied in ' \
                        '`extraImport\' conf var.'%modName )
            else:
                gLogger.debug( 'Module "%s" already loaded.'%modName )
    eval_task( task )



